# pnpm 从命令行、环境变量和 .npmrc 文件获取其配置。
# pnpm config 命令可用于更新和编辑用户和全局 .npmrc 文件的内容。
# Usage: pnpm config set <key> <value>
#        pnpm config get <key>
#        pnpm config delete <key>
#        pnpm config list
#        pnpm config list --json

# 电脑中有多个 .npmrc 文件，在我们安装包的时候，pnpm按照如下顺序读取这些配置文件

# 1. 每个项目的配置文件 (/path/to/my/project/.npmrc)

# 2. 每个工作区的配置文件（也就是包含 pnpm-workspace.yaml 文件的目录）

# 3. 每用户配置文件 (~/.npmrc)  C:\Users\克林辣舞\.npmrc npm config get userconfig 命令找到该文件的路径

# 4. 全局配置文件（/etc/npmrc） C:\Program Files\nodejs\node_modules\npm\.npmrc

# 5. npm 内置配置文件 /path/to/npm/npmrc C:\nvm\nvm\v16.20.0\node_modules\npm\.npmrc

# 为什么要在pnpm项目中配置这个npmrc呢？主要是 依赖提升设置
# hoist 
# 当 true 时，所有依赖都提升到 node_modules/.pnpm/node_modules。 这使得 node_modules 内的所有包都可以访问未列出的依赖。
# hoist-pattern
# 告诉 pnpm 哪些包应该提升到 node_modules/.pnpm/node_modules。 
# 默认情况下，所有包都会被提升 - 但是，如果你知道只有某些有缺陷的包具有幽灵依赖，则可以使用此选项专门提升幻像依赖（推荐）
# shamefully-hoist
# 默认情况下，pnpm 创建半严格 node_modules，这意味着依赖可以访问未声明的依赖，但 node_modules 之外的模块则不能。 
# 如果某些工具仅在提升的依赖位于 node_modules 的根目录中时才起作用，则可以将其设置为 true 来为你提升它们。

shamefully-hoist = true