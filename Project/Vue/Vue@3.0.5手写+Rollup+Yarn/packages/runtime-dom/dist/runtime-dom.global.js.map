{"version":3,"file":"runtime-dom.global.js","sources":["../src/nodeOps.ts","../src/modules/class.ts","../src/modules/style.ts","../src/modules/attrs.ts","../src/modules/events.ts","../src/patchProps.ts","../../shared/src/index.ts","../../reactivity/src/effect.ts","../../reactivity/src/baseHandlers.ts","../../reactivity/src/reactive.ts","../../reactivity/src/ref.ts","../../reactivity/src/computed.ts","../../runtime-core/src/vnode.ts","../../runtime-core/src/apiCreateApp.ts","../../runtime-core/src/componentPublicInstance.ts","../../runtime-core/src/component.ts","../../runtime-core/src/scheduler.ts","../../runtime-core/src/renderer.ts","../../runtime-core/src/h.ts","../src/index.ts"],"sourcesContent":["/**\r\n * @description 包含一系列的DOM节点操作方法\r\n */\r\nexport const nodeOps = {\r\n  /**\r\n   * 元素操作\r\n   */\r\n  createElement(tagName) {\r\n    return document.createElement(tagName);\r\n  },\r\n  remove(child) {\r\n    let parent = child.parentNode;\r\n    if (parent) {\r\n      parent.removeChild(child);\r\n    }\r\n  },\r\n  /**\r\n   * 将节点child插入到节点anchor的前面\r\n   * 如果anchor为空 则等同于appendChild插入到末尾\r\n   * @param child\r\n   * @param parent\r\n   * @param anchor\r\n   */\r\n  insert(child, parent, anchor = null) {\r\n    parent.insertBefore(child, anchor);\r\n  },\r\n  setElementText(el, text) {\r\n    el.textContent = text;\r\n  },\r\n  querySelector: (selector) => {\r\n    return document.querySelector(selector);\r\n  },\r\n  /**\r\n   * 文本操作\r\n   */\r\n  createText(text) {\r\n    return document.createTextNode(text);\r\n  },\r\n  setText(node, text) {\r\n    node.nodeValue = text;\r\n  },\r\n};\r\n","/**\r\n * 之前没有 现在有 取nextClass\r\n * 之前有 现在没有 nextClass为null 删除el删的所有class\r\n * 之前有 现在有 取nextClass\r\n * @param el\r\n * @param classValue\r\n */\r\nexport function patchClass(el, classValue) {\r\n  if (!classValue) {\r\n    classValue = \"\";\r\n  }\r\n\r\n  el.className = classValue;\r\n}\r\n","/**\r\n * 1. 新的么有 说明样式不存在了 移除掉就好了\r\n * 2. 新的有 旧的也有\r\n * @param el\r\n * @param prevStyle 旧的style对象\r\n * @param nextStyle 新的style对象\r\n */\r\nexport function patchStyle(el, prevStyle, nextStyle) {\r\n  // {color:'red',height:\"10px\"} => \"\"\r\n  if (!nextStyle) {\r\n    // 操作DOM的地方\r\n    el.removeAttribute(\"style\");\r\n  } else {\r\n    // 旧的style对象有 但是新的style对象中没有\r\n    // {color:'red',height:\"10px\"} => {height:\"10px\"}\r\n    if (prevStyle) {\r\n      for (const key in prevStyle) {\r\n        if (nextStyle[key] == null) {\r\n          // 操作DOM的地方\r\n          el.style[key] = \"\";\r\n        }\r\n      }\r\n    }\r\n\r\n    // 嘴周将新的style的属性无脑放到el上\r\n    for (const key in nextStyle) {\r\n      // 操作DOM的地方\r\n      el.style.setProperty(key, nextStyle[key]);\r\n    }\r\n  }\r\n}\r\n","export function patchAttr(el, key, nextValue) {\r\n  if (!nextValue) {\r\n    el.removeAttribute(key);\r\n  } else {\r\n    el.setAttribute(key, nextValue);\r\n  }\r\n}\r\n","/**\r\n *\r\n * 1. 更新前有 更新后有 此时需要patch 也就是先从缓存中取出之前存的函数引用listenter 然后修改它的指向为新的value即可\r\n * 2. 更新前有 更新后无 此时删除缓存并且解绑dom事件\r\n * 3. 更新前无 更新后有 此时新增缓存且绑定dom事件\r\n *\r\n * @param el dom元素\r\n * @param key 事件名称 比如onclick\r\n * @param prevValue fn1\r\n * @param nextValue fn2\r\n */\r\nexport function patchEvent(el, key, prevValue, nextValue) {\r\n  const invokers = el._vueEventInvokers || (el._vueEventInvokers = {});\r\n  const existingInvoker = invokers[key];\r\n\r\n  if (existingInvoker && nextValue) {\r\n    // 更新绑定的函数\r\n    existingInvoker.value = nextValue;\r\n  } else {\r\n    const eventName = key.slice(2).toLowerCase(); // 'click mouseenter scroll'\r\n\r\n    if (nextValue) {\r\n      // 如果新的dom上有key也有value 那么就说明新增一个事件\r\n      let invoker = createInvoker(nextValue);\r\n      invokers[key] = invoker; // 加入缓存\r\n      el.addEventListener(eventName, invoker);\r\n    } else {\r\n      // 如果没有新值 那么移除之前\r\n      el.removeEventListener(eventName, existingInvoker);\r\n      invokers[key] = null; // 移除缓存\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * 将用户绑定在事件上的函数包装成为一个匿名函数的调用 并用一个变量value保存它\r\n * 以便于后续直接取读取和改写这个函数的引用即可完成对事件函数的修改\r\n * 更新前：div @click=\"fn1\"\r\n * 更新后：div @click=\"fn2\"\r\n *\r\n * 1. 先移除fn1 然后新增绑定fn2\r\n * 2. 不能绑定两次 不会覆盖 会添加到事件队列中\r\n * 3. 用函数包装\r\n *\r\n * 更新前：div onClick=\"fn1\"\r\n *        let listenter = (e)=>fn1(e);\r\n *        listenter.value = fn1\r\n *        div onClick=\"listenter\"\r\n *\r\n *\r\n * 更新后：div onClick=\"fn2\"\r\n *        listenter.value = fn2 只需要修改listenter的引用\r\n *        div onClick=\"listenter\" 并不需要重新对dom进行解绑和重新绑定\r\n * @param listener\r\n * @returns\r\n */\r\nfunction createInvoker(listener) {\r\n  const invoker = (e) => listener(e);\r\n  invoker.value = listener;\r\n  return invoker;\r\n}\r\n","import { patchClass } from \"./modules/class\";\r\nimport { patchStyle } from \"./modules/style\";\r\nimport { patchAttr } from \"./modules/attrs\";\r\nimport { patchEvent } from \"./modules/events\";\r\n\r\nconst nativeOnRE = /^on[a-z]/;\r\n/**\r\n * @description 包含一系列的属性更新操作\r\n */\r\nexport const patchProp = (el, key, prevValue, nextValue) => {\r\n  switch (key) {\r\n    case \"class\":\r\n      patchClass(el, nextValue);\r\n      break;\r\n    case \"style\":\r\n      patchStyle(el, prevValue, nextValue);\r\n      break;\r\n    default:\r\n      // 如果是事件\r\n      if (nativeOnRE.test(key)) {\r\n        patchEvent(el, key, prevValue, nextValue);\r\n      } else {\r\n        // 如果是dom属性\r\n        patchAttr(el, key, nextValue);\r\n      }\r\n      // 如果是元素属性\r\n      break;\r\n  }\r\n};\r\n","export * from \"./shapeFlags\";\r\n\r\nexport const objectToString = Object.prototype.toString;\r\nexport const toTypeString = (value: unknown): string =>\r\n  objectToString.call(value);\r\nexport const hasOwnProperty = Object.hasOwnProperty;\r\n\r\nexport const isObject = (value: any): boolean => {\r\n  return typeof value === \"object\" && value !== null;\r\n};\r\n\r\nexport const isPlainObject = (val: unknown) =>\r\n  toTypeString(val) === \"[object Object]\";\r\n\r\nexport const isFunction = (value: any): boolean => {\r\n  return typeof value === \"function\";\r\n};\r\n\r\nexport const isArray = Array.isArray;\r\n\r\nexport const isMap = (val: unknown) => toTypeString(val) === \"[object Map]\";\r\n\r\nexport const isSET = (val: unknown) => toTypeString(val) === \"[object Set]\";\r\n\r\nexport const isString = (val: unknown) =>\r\n  toTypeString(val) === \"[object String]\";\r\n\r\nexport const isNumber = (val: unknown) =>\r\n  toTypeString(val) === \"[object Number]\";\r\n\r\nexport const isBoolean = (val: unknown) =>\r\n  toTypeString(val) === \"[object Boolean]\";\r\n\r\nexport const hasOwn = (obj, key) => hasOwnProperty.call(obj, key);\r\n\r\n/**\r\n * @description 判断传入的属性名是否是一个数字类型的字符串 比如'0' '1' '10'都符合 但是'-1' 'name' 'NaN'不符合\r\n * @param key\r\n * @returns\r\n */\r\nexport const isIntegerKey = (key: unknown) =>\r\n  isString(key) &&\r\n  key !== \"NaN\" &&\r\n  key[0] !== \"-\" &&\r\n  \"\" + parseInt(key as string, 10) === key;\r\n","import { isArray, isIntegerKey } from \"@gg-vue/shared\";\r\nimport { TrackOpTypes, TraggerOpTypes } from \"./operations\";\r\n\r\ntype Dep = Set<ReactiveEffect>;\r\n\r\ninterface ReactiveEffectOptions {\r\n  lazy?: boolean;\r\n  scheduler?: (job: ReactiveEffect) => void;\r\n  onTrack?: (event) => void;\r\n  onTrigger?: (event) => void;\r\n  onStop?: () => void;\r\n  allowRecurse?: boolean;\r\n}\r\n\r\ninterface ReactiveEffect<T = any> {\r\n  (): T;\r\n  _isEffect: true;\r\n  id: number;\r\n  active: boolean;\r\n  raw: () => T;\r\n  deps: Array<Dep>;\r\n  options: ReactiveEffectOptions;\r\n}\r\n\r\n/**\r\n * @description 响应式的核心实现effect函数\r\n * @param fn 回调函数\r\n *\r\n * 1. 默认会将传入的fn立即执行 如果是lazy 那么不会立即执行\r\n */\r\nexport function effect(fn, options: ReactiveEffectOptions = {}) {\r\n  const effect = createReactiveEffect(fn, options);\r\n\r\n  if (!options.lazy) {\r\n    effect();\r\n  }\r\n\r\n  return effect;\r\n}\r\n\r\n/**\r\n * @description 每次执行当前的effect重新渲染的时候 首先把存储的deps清空 避免重复执行effect\r\n * @param effect 当前执行的effect函数\r\n */\r\nfunction cleanup(effect) {\r\n  const { deps } = effect;\r\n  if (deps.length) {\r\n    for (const dep of deps) {\r\n      dep.delete(effect);\r\n    }\r\n    deps.length = 0;\r\n  }\r\n}\r\n\r\nlet uid = 0;\r\nlet activeEffect: ReactiveEffect<any>;\r\n// 栈结构主要是用于解决effect的嵌套执行 因为组件就是嵌套的\r\nconst effectStack: Array<ReactiveEffect> = [];\r\n\r\n/**\r\n * @description 创建一个effect副作用函数并返回 执行这个effect函数可以添加对内部响应式数据的主动观测\r\n * @param fn\r\n * @param options\r\n * @returns\r\n */\r\nfunction createReactiveEffect(\r\n  fn,\r\n  options: ReactiveEffectOptions\r\n): ReactiveEffect<any> {\r\n  const effect = function reactiveEffect() {\r\n    // 解决一个effect被无限循环执行 eg:effect(()=>{state.age++})\r\n    // debugger;\r\n    if (!effectStack.includes(effect)) {\r\n      // 每次执行前先做一个cleanup\r\n      cleanup(effect);\r\n\r\n      // 执行fn回调会去代理对象上取值 依赖收集就是在这里发生的\r\n      try {\r\n        effectStack.push(effect);\r\n        activeEffect = effect;\r\n        const res = fn();\r\n        return res; // 后续计算属性需要这个函数执行的结果\r\n      } finally {\r\n        effectStack.pop();\r\n        activeEffect = effectStack[effectStack.length - 1];\r\n      }\r\n    }\r\n  } as ReactiveEffect;\r\n\r\n  /* 给创建出来的effect打上标记 */\r\n  effect.id = uid++;\r\n  effect._isEffect = true;\r\n  effect.raw = fn;\r\n  effect.options = options;\r\n  effect.active = true;\r\n  effect.deps = [];\r\n\r\n  return effect;\r\n}\r\n\r\nconst targetMap = new WeakMap();\r\n/**\r\n * @description 属性的依赖收集\r\n * @param target 那个对象\r\n * @param type 属性收集的类型\r\n * @param key 那个属性\r\n */\r\nexport function track(target, type: TrackOpTypes, key) {\r\n  // debugger;\r\n  if (activeEffect === undefined) return;\r\n\r\n  let depsMap = targetMap.get(target);\r\n  if (!depsMap) {\r\n    depsMap = new Map();\r\n    targetMap.set(target, depsMap);\r\n  }\r\n\r\n  let dep = depsMap.get(key);\r\n  if (!dep) {\r\n    dep = new Set();\r\n    depsMap.set(key, dep);\r\n  }\r\n\r\n  if (!dep.has(activeEffect)) {\r\n    // 让属性记住依赖(组件)：更新当前target对象的key属性所收集的依赖Set集合 Set{effect1,effect2}\r\n    dep.add(activeEffect);\r\n    // 让依赖(组件)也记住属性:将当前这一刻的属性自身的dep也就是Set集合(存放着当前属性的所有依赖effect)\r\n    activeEffect.deps.push(dep);\r\n  }\r\n\r\n  console.log(\r\n    \"依赖收集完成一次，当前的targetMap是 === > \",\r\n    \"\\r\\n\",\r\n    target,\r\n    \"\\r\\n\",\r\n    key,\r\n    \"\\r\\n\",\r\n    targetMap\r\n  );\r\n}\r\n\r\n/**\r\n * @description 属性的更新通知\r\n * @param target\r\n * @param type\r\n * @param key\r\n * @param newValue\r\n * @param oldValue\r\n */\r\nexport function trigger(target, type, key?, newValue?, oldValue?) {\r\n  // debugger;\r\n  let depsMap = targetMap.get(target);\r\n  // 如果在weakMap依赖收集集合中找不到这个对象 说明没有被收集 那么不用更新\r\n  if (!depsMap) return;\r\n\r\n  // 新建一个Set集合用来存储本次更新的所有effect 目的是去重\r\n  const effects = new Set();\r\n\r\n  /**\r\n   * @description 专门用于更新时将属性key对应的dep 也就是Set集合都添加到统一的effects中\r\n   * @param effectToAdd\r\n   */\r\n  const add = (effectToAdd) => {\r\n    if (effectToAdd) {\r\n      // 遍历Set集合 然后依次添加\r\n      for (const effect of effectToAdd) {\r\n        effects.add(effect);\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * 特殊处理1：关于数组length的更新\r\n   * 场景：如果在依赖收集的时候对于某个数组arr的length属性和索引属性都进行了收集，比如：\r\n   *  const state = reactive([100,200,300])\r\n   *  state[2] state.length 此时页面渲染：300和3\r\n   *\r\n   *  如果后续修改了length属性的值 此时就需要特殊处理，比如：\r\n   *  + state.length被修改为大于等于原来length的值\r\n   *    比如state.length = 5 此时只需要找到length收集的依赖进行更新\r\n   *  + state.length被修改为小于原来length的值\r\n   *    比如state.length = 0 此时不仅需要更新length依赖\r\n   *    还需从依赖集合中找到当前收集的所有数组索引属性比如'2' 然后更新相关依赖\r\n   *    因为数组的长度都变为0了 数组应该为空 此时页面应该为：undefined和0\r\n   *\r\n   */\r\n  if (key === \"length\" && isArray(target)) {\r\n    depsMap.forEach((dep, key) => {\r\n      // 这里的key可能是length 也可能是数字索引属性 newValue就是被新赋值的长度\r\n      if (key === \"length\" || key >= newValue) {\r\n        add(dep);\r\n      }\r\n    });\r\n  } else {\r\n    // 走到这里只能是：对象属性更新 或 数组索引属性更新\r\n    if (key !== undefined) {\r\n      add(depsMap.get(key));\r\n    }\r\n\r\n    /**\r\n     * 如果直接修改了数组的索引属性并因此修改了length,比如：\r\n     * const state = reactive([100,200,300])\r\n     * state.length 依赖收集 渲染3\r\n     *  state[100] = 0;\r\n     * 此时数组的length会变为100 需要触发length有关的依赖 渲染 100 200 300，，，，，，0\r\n     */\r\n    switch (type) {\r\n      case TraggerOpTypes.ADD:\r\n        if (isArray(target) && isIntegerKey(key)) {\r\n          add(depsMap.get(\"length\"));\r\n        }\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  // 触发更新 也就是取出当前属性key的每一个effect然后执行 再次更新的时候会重新去依赖收集触发getter并拿到更新后的值\r\n  // 在页面上的表现就是视图上绑定的依赖属性都发生了变化\r\n  effects.forEach((effect: any) => {\r\n    if (effect.options.scheduler) {\r\n      effect.options.scheduler(effect);\r\n    } else {\r\n      effect();\r\n    }\r\n  });\r\n}\r\n","/**\r\n * Notes:\r\n * 1. 避免写重复的radonl的setter 使用assign进行解耦\r\n * 2. 函数柯里化的思想\r\n * 3. 为什么用Reflect.get而不是target[key]\r\n *      + ES Next以后会将Object上的方法迁移到Reflect来\r\n *      + target[key]=value设置值就算设置失败也不会异常 但是Reflect设置值具有返回值\r\n *      + 解决源对象中有get访问器属性的时候修改源对象中name的值不引起响应式更新的bug\r\n * 4. Object.assign会修改第一个参数的值 很难注意到的bug\r\n */\r\n\r\nimport { isObject, isArray, isIntegerKey, hasOwn } from \"@gg-vue/shared\";\r\nimport {\r\n  readonly,\r\n  reactive,\r\n  ReactiveFlags,\r\n  reactiveMap,\r\n  readonlyMap,\r\n} from \"./reactive\";\r\nimport { TrackOpTypes, TraggerOpTypes } from \"./operations\";\r\nimport { track, trigger } from \"./effect\";\r\n\r\n/**\r\n * @description 创建一个get拦截函数并返回 依赖收集在此发生\r\n * @param isReadonly 是否只读\r\n * @param shallow 是否为浅劫持\r\n */\r\nfunction createGetter(isReadonly = false, shallow = false) {\r\n  return function get(target, key, receiver) {\r\n    if (\r\n      key === ReactiveFlags.RAW &&\r\n      receiver === (isReadonly ? readonlyMap : reactiveMap).get(target)\r\n    ) {\r\n      return target;\r\n    }\r\n\r\n    const result = Reflect.get(target, key, receiver);\r\n\r\n    // 如果不是只读的 进行依赖收集\r\n    if (!isReadonly) {\r\n      track(target, TrackOpTypes.GET, key);\r\n    }\r\n\r\n    // 如果是浅收集 那么直接返回即可\r\n    if (shallow) {\r\n      return result;\r\n    }\r\n\r\n    /* \r\n        vue3.0的懒代理\r\n        + vue2.0是一上来就对对象进行递归劫持\r\n        + vue3.0是取值取到一个对象的时候才去代理\r\n    */\r\n    if (isObject(result)) {\r\n      return isReadonly ? readonly(result) : reactive(result);\r\n    }\r\n\r\n    return result;\r\n  };\r\n}\r\n\r\n/**\r\n * @description 创建一个set拦截函数并返回 通知更新在此发生 新增 - 修改 - 相等\r\n * @param shallow 是否为浅劫持\r\n */\r\nfunction createSetter(shallow = false) {\r\n  return function set(target, key, value, receiver) {\r\n    // 获取旧值\r\n    const oldValue = target[key];\r\n\r\n    /**\r\n     * 判断1：setter的时候是修改值还是新增值？\r\n     * 1. 如果target是数组并且key是有效索引 那么就判断修改的索引key是否小于数组长度 如果是那么就是修改 否则就是新增\r\n     * 2. 否则target就是对象 那么就判断当前对象target上是否存在属性key 如果存在就是修改 否则就是新增\r\n     * 3. Proxy的强大之处就是可以监控到任何修改数组和对象的行为 比如修改数组的索引和新增对象属性 在Vue2中要用$set方法实现\r\n     */\r\n\r\n    const isExistKey =\r\n      isArray(target) && isIntegerKey(key)\r\n        ? Number(key) < target.length\r\n        : hasOwn(target, key);\r\n\r\n    // 获取设置后的返回值用于setter方法的返回值\r\n    const res = Reflect.set(target, key, value, receiver);\r\n\r\n    if (!isExistKey) {\r\n      // 走新增的更新\r\n      trigger(target, TraggerOpTypes.ADD, key, value);\r\n    } else if (oldValue !== value) {\r\n      // 走修改的更新\r\n      trigger(target, TraggerOpTypes.SET, key, value, oldValue);\r\n    }\r\n\r\n    return res;\r\n  };\r\n}\r\n\r\nconst get = createGetter();\r\nconst shallowGet = createGetter(false, true);\r\nconst readonlyGet = createGetter(true);\r\nconst shallowReadonlyGet = createGetter(true, true);\r\n\r\nconst set = createSetter();\r\nconst shallowSet = createSetter(true);\r\n\r\nexport const mutableHandlers = {\r\n  get,\r\n  set,\r\n};\r\n\r\nexport const shallowReactiveHandlers = {\r\n  get: shallowGet,\r\n  set: shallowSet,\r\n};\r\n\r\nexport const readonlyHandlers = {\r\n  get: readonlyGet,\r\n  set: (target, key) => {\r\n    console.warn(\r\n      `Set operation on key \"${String(key)}\" failed: target is readonly.`,\r\n      target\r\n    );\r\n    return true;\r\n  },\r\n};\r\n\r\nexport const shallowReadonlyHandlers = Object.assign({}, readonlyHandlers, {\r\n  get: shallowReadonlyGet,\r\n});\r\n","import {\r\n  mutableHandlers,\r\n  readonlyHandlers,\r\n  shallowReactiveHandlers,\r\n  shallowReadonlyHandlers,\r\n} from \"./baseHandlers\";\r\n\r\nimport { isObject } from \"@gg-vue/shared\";\r\n\r\nexport function reactive(target) {\r\n  return createReactiveObject(target, false, mutableHandlers);\r\n}\r\n\r\nexport function shallowReactive(target) {\r\n  return createReactiveObject(target, false, shallowReactiveHandlers);\r\n}\r\n\r\nexport function readonly(target) {\r\n  return createReactiveObject(target, true, readonlyHandlers);\r\n}\r\n\r\nexport function shallowReadonly(target) {\r\n  return createReactiveObject(target, true, shallowReadonlyHandlers);\r\n}\r\n\r\nexport const enum ReactiveFlags {\r\n  SKIP = \"__v_skip\",\r\n  IS_REACTIVE = \"__v_isReactive\",\r\n  IS_READONLY = \"__v_isReadonly\",\r\n  RAW = \"__v_raw\",\r\n}\r\n\r\n// 存放响应代理的缓存 以target为key 以代理对象proxy为value\r\nexport const reactiveMap = new WeakMap();\r\n// 存放只读代理的缓存\r\nexport const readonlyMap = new WeakMap();\r\n\r\n/**\r\n *\r\n * @description 基于传入的target和isReadonly等配置创建一个Proxy响应式对象并返回\r\n * @param target 要代理的目标对象\r\n * @param isReadonly 是否只读\r\n * @param baseHandlers Proxy中的handles拦截器\r\n */\r\nfunction createReactiveObject(target, isReadonly, baseHandlers) {\r\n  // 只有目标是对象 才可以进行属性劫持\r\n  if (!isObject(target)) {\r\n    console.warn(`value cannot be made reactive: ${String(target)}`);\r\n    return target;\r\n  }\r\n\r\n  // 如果对象已经被代理过了 那么优先读取缓存 不进行重复的代理\r\n  const proxyMap = isReadonly ? readonlyMap : reactiveMap;\r\n  const existingProxy = proxyMap.get(target);\r\n  if (existingProxy) {\r\n    return existingProxy;\r\n  }\r\n\r\n  // 创建响应式对象\r\n  const proxy = new Proxy(target, baseHandlers);\r\n\r\n  proxyMap.set(target, proxy);\r\n  return proxy;\r\n}\r\n\r\nexport function toRaw(observed) {\r\n  return observed[ReactiveFlags.RAW] || observed;\r\n}\r\n\r\n/**\r\n * @description 将一个对象打上SKIP标记 以便于跳过响应式包装\r\n * @param value\r\n */\r\nexport function markRaw(value) {\r\n  Object.defineProperty(value, ReactiveFlags.SKIP, {\r\n    enumerable: false,\r\n    configurable: true,\r\n    value,\r\n  });\r\n  return value;\r\n}\r\n","/**\r\n * 将普通类型转化为一个对象\r\n * 这个对象有value属性指向原来的原始值\r\n * name.value\r\n * name.value = xxx;\r\n *\r\n */\r\nimport { isObject } from \"@gg-vue/shared\";\r\nimport { track, trigger } from \"./effect\";\r\nimport { TrackOpTypes, TraggerOpTypes } from \"./operations\";\r\nimport { reactive } from \"./reactive\";\r\n\r\n/**\r\n * @description 如果rawValue是一个对象 将其转化为响应式的对象后返回\r\n * @param rawValue 用户调用ref()时传入的值 可能是对象可能是基本值\r\n * @returns\r\n */\r\nfunction convert(rawValue) {\r\n  if (isObject(rawValue)) {\r\n    return reactive(rawValue);\r\n  } else {\r\n    return rawValue;\r\n  }\r\n}\r\n\r\n/**\r\n * 核心：ref和reactive的区别\r\n * reactive内部使用proxy实现拦截\r\n * ref内部使用类的访问器和取值器 其实编译之后就是definProperty实现拦截\r\n *\r\n * ref可以接受一个value的值为对象或者原始值\r\n * 返回的是一个RefImpl的实例\r\n */\r\nexport function ref(value) {\r\n  return createRef(value);\r\n}\r\n\r\nexport function shallowRef(value) {\r\n  return createRef(value, true);\r\n}\r\n\r\nfunction createRef(rawValue, shallow = false) {\r\n  return new RefImpl(rawValue, shallow);\r\n}\r\n\r\n/**\r\n * TypeScript的类\r\n * 1. 所有可以this.xxx访问的属性必须要在顶部通过public或privite声明\r\n * 2. 在ts类的构造器函数的参数中声明并添加public或privite声明，会默认执行：this.xxx = xxx的行为\r\n *    代表属性就被默认放到this实例上了\r\n */\r\nclass RefImpl {\r\n  public _value; // 取值和存值的时候公共操作的值 有可能是原始值 也有可能是Proxy后的值\r\n  public __v_isRef = true; // 标识是否为一个RefImpl实例\r\n\r\n  /**\r\n   *\r\n   * @param rawValue 永远暴露的是未被代理过的值\r\n   * @param shallow 是否浅劫持\r\n   */\r\n  constructor(public rawValue, public shallow) {\r\n    // 如果是浅劫持 就直接赋值即可 否则需要将每一层都转化为响应式的值\r\n    this._value = shallow ? rawValue : convert(rawValue);\r\n  }\r\n\r\n  /**\r\n   * @description 外部执行 state.value 进行依赖收集\r\n   */\r\n  get value() {\r\n    track(this, TrackOpTypes.GET, \"value\");\r\n    return this._value;\r\n  }\r\n\r\n  /**\r\n   * @description 外部执行 state.value = xxx 进行通知更新\r\n   */\r\n  set value(newValue) {\r\n    if (newValue !== this.rawValue) {\r\n      // 每次设置值的时候再次判断\r\n      this._value = this.shallow ? newValue : convert(newValue);\r\n      this.rawValue = newValue;\r\n      trigger(this, TraggerOpTypes.SET, \"value\", newValue);\r\n    }\r\n  }\r\n}\r\n\r\nexport function isRef(target) {\r\n  return Boolean(target?.__v_isRef === true);\r\n}\r\n\r\n/**\r\n *\r\n * @description 将target对象的key属性转换为一个Ref实例并返回 返回的ref和源对象target保持同步更改\r\n * 将targte[key]的访问形式 转化为 属性访问器.value的形式\r\n * @param target\r\n * @param key\r\n */\r\nexport function toRef(target, key) {\r\n  if (isRef(target[key])) {\r\n    return target[key];\r\n  } else {\r\n    // 这里其实很简单 就是对象引用值地址传递过去操作即可\r\n    return new ObjectRefImpl(target, key);\r\n  }\r\n}\r\n\r\n/**\r\n * @description 将一个响应式对象转换为一个普通对象，这个普通对象的每个属性都是指向源对象相应属性的 ref\r\n * @param target\r\n * @use 从组合式函数中返回响应式对象时，toRefs 相当有用 消费者组件可以解构/展开返回的对象而不会失去响应性：\r\n * 直接对一个reactive的对象进行解构会丢失响应式\r\n * 但是可以先对响应式对象执行toRefs操作将其转化为普通对象\r\n * 然后解构到每一个属性对应的值都是一个toRef的返回值就不会丢失响应式\r\n */\r\nexport function toRefs(target) {\r\n  const ret = Array.isArray(target) ? [] : {};\r\n  for (const key in target) {\r\n    ret[key] = toRef(target, key);\r\n  }\r\n  return ret;\r\n}\r\n\r\nclass ObjectRefImpl {\r\n  public __v_isRef = true;\r\n  constructor(public target, public key) {}\r\n\r\n  get value() {\r\n    return this.target[this.key];\r\n  }\r\n\r\n  set value(newValue) {\r\n    this.target[this.key] = newValue;\r\n  }\r\n}\r\n\r\nexport function unref(ref) {\r\n  return isRef(ref) ? ref.value : ref;\r\n}\r\n","import { isFunction } from \"@gg-vue/shared\";\r\nimport { effect, track, trigger } from \"./effect\";\r\nimport { TrackOpTypes, TraggerOpTypes } from \"./operations\";\r\n\r\nexport function computed(getterOrOptions) {\r\n  let getter;\r\n  let setter;\r\n\r\n  if (isFunction(getterOrOptions)) {\r\n    getter = getterOrOptions;\r\n    setter = () => {};\r\n  } else {\r\n    getter = getterOrOptions.get || (() => {});\r\n    setter = getterOrOptions.set || (() => {});\r\n  }\r\n\r\n  // 创建一个计算属性的实例\r\n  return new ComputedRefImpl(getter, setter);\r\n}\r\n\r\nclass ComputedRefImpl {\r\n  public _dirty = true;\r\n  public effect;\r\n  private _value;\r\n\r\n  constructor(getter, public setter) {\r\n    /**\r\n     * 将计算属性传入的getter看做是一个effect的fn 创建一个effect函数并返回\r\n     * effect有什么用呢？\r\n     * 执行effect可以执行包裹的fn也就是getter\r\n     * 执行getter的过程中会进行依赖收集\r\n     * 后续getter函数中用到的属性发生变化就可以触发属性更新\r\n     *\r\n     * lazy属性表示不会立即执行effect\r\n     * scheduler属性表示更新的时候不走默认执行effect逻辑 而是走scheduler调度器逻辑\r\n     * scheduler采用对象属性写法this是这个options对象\r\n     * scheduler采用箭头函数写法this是计算属性实例\r\n     */\r\n    this.effect = effect(getter, {\r\n      lazy: true,\r\n      scheduler: () => {\r\n        if (!this._dirty) {\r\n          this._dirty = true;\r\n        }\r\n        // 每次计算属性依赖的属性比如name变化了\r\n        // 需要通知依赖计算属性自己的上一层effect也更新\r\n        trigger(this, TraggerOpTypes.SET, \"value\");\r\n      },\r\n    });\r\n  }\r\n\r\n  get value() {\r\n    if (this._dirty) {\r\n      // effect执行的返回值就是getter的返回值\r\n      const res = this.effect();\r\n      this._value = res;\r\n      this._dirty = false;\r\n    }\r\n    // 计算属性实例可以把自己当做对象target 进行依赖收集\r\n    track(this, TrackOpTypes.GET, \"value\");\r\n    // 然后将值返回\r\n    return this._value;\r\n  }\r\n\r\n  //   计算属性不需要主动更新setter\r\n  set value(newValue) {\r\n    this.setter(newValue);\r\n  }\r\n}\r\n","import {\r\n  ShapeFlags,\r\n  isArray,\r\n  isFunction,\r\n  isObject,\r\n  isString,\r\n} from \"@gg-vue/shared\";\r\n/**\r\n * @description Vue3.0官方文档对于createVNode的描述\r\n *\r\n * 1. createVNode函数专门用来创建虚拟节点 但是它还有另外一个名字那就是h函数\r\n * 2. h() 是 hyperscript 的简称——意思是“能生成 HTML (超文本标记语言) 的 JavaScript”。这个名字来源于许多虚拟 DOM 实现默认形成的约定。\r\n * 3. h函数的参数非常灵活：\r\n *  + 第一个参数可以是一个html标签字符串 也可以是一个component对象\r\n *  + 第二个参数是要传递的 prop\r\n *  + 第三个参数是子节点\r\n *  + 当创建一个组件的 vnode 时，子节点必须以插槽函数进行传递。+\r\n *  + 当子节点不是插槽对象时，可以省略 prop 参数。\r\n *  + 如果组件只有默认槽，可以使用单个插槽函数进行传递。否则，必须以插槽函数的对象形式来传递。\r\n *\r\n *\r\n * @param type {string | Component}  代表类型可以是组件对象或者原生html元素的字符串\r\n * @param props 属性对象\r\n * @param children 子节点 可能是字符串或者vNode\r\n */\r\nexport function createVNode(type, props: any = {}, children = null) {\r\n  /* 给虚拟节点打上类型标记 */\r\n  let shapeFlag;\r\n  if (isString(type)) {\r\n    shapeFlag = ShapeFlags.ELEMENT; // HTML元素 1\r\n  } else if (isObject(type)) {\r\n    shapeFlag = ShapeFlags.STATEFUL_COMPONENT; // 普通组件 4\r\n  } else if (isFunction(type)) {\r\n    shapeFlag = ShapeFlags.FUNCTIONAL_COMPONENT; // 函数组件 2\r\n  } else {\r\n    shapeFlag = 0;\r\n  }\r\n\r\n  /**\r\n   * 核心的虚拟DOM节点 本质就是用js对象来描述一个UI节点\r\n   * 好处1：是具有跨平台的能力 不限于浏览器 node中也可以体验到vue-runtime-core的能力\r\n   * 好处2：可以在更新时进行patch 只更新变化的节点 减少dom操作\r\n   */\r\n  const vnode = {\r\n    __v_isVNode: true, // 表示虚拟节点\r\n    key: props && props.key,\r\n    type, // 组件还是元素\r\n    props,\r\n    children,\r\n    component: null, // 存放组件对应的实例\r\n    el: null, // 真实dom和虚拟dom的链接点 在更新的时候用于获取上一次的虚拟dom\r\n    shapeFlag, // 类型\r\n  };\r\n\r\n  normalizeChildren(vnode, children);\r\n\r\n  return vnode;\r\n}\r\n\r\n/**\r\n * @description 基于当前的虚拟节点是否有children子节点来修正虚拟节点的类型\r\n * 比如vnode是一个组件类型 但是由于有了子节点 应该是一个带有子节点的组件类型\r\n * @param vnode\r\n * @param children\r\n */\r\nfunction normalizeChildren(vnode, children) {\r\n  let type = 0;\r\n\r\n  if (children == null) {\r\n    children == null;\r\n  } else if (isArray(children)) {\r\n    type = ShapeFlags.ARRAY_CHILDREN;\r\n  } else {\r\n    type = ShapeFlags.TEXT_CHILDREN;\r\n  }\r\n\r\n  /**\r\n   * 进行或运算 可以得出自己的类型和儿子的类型 比如：\r\n   * 00000010 | 00010000 => 00010010\r\n   * 自己的类型是一个元素element\r\n   * 儿子的类型是一个文本节点还是一个数组组成的节点\r\n   */\r\n  vnode.shapeFlag = vnode.shapeFlag | type;\r\n}\r\n\r\nexport function isVNode(value: any) {\r\n  return value ? value.__v_isVNode === true : false;\r\n}\r\n\r\nexport function normalizeVNode(child) {\r\n  // 说明本身就是用h函数创建出来的虚拟节点 直接返回即可\r\n  if (isObject(child)) {\r\n    return child;\r\n  } else {\r\n    // 说明是文本节点 type, props children\r\n    return createVNode(Text, null, String(child));\r\n  }\r\n}\r\n\r\nexport const Text = Symbol(\"Text\");\r\nexport const Comment = Symbol(\"Comment\");\r\nexport const Static = Symbol(\"Static\");\r\n","import { createVNode } from \"./vnode\";\r\n\r\nfunction createAppContext() {\r\n  return {\r\n    app: null,\r\n    config: {\r\n      globalProperties: {},\r\n      isNativeTag: false,\r\n      isCustomElement: false,\r\n      errorHandler: undefined,\r\n      warnHandler: undefined,\r\n    },\r\n    mixins: [],\r\n    components: {},\r\n    directives: {},\r\n    provides: Object.create(null),\r\n  };\r\n}\r\n\r\n/**\r\n * @description 基于传入的render函数 返回一个用来创建App应用的函数createApp\r\n * @param render 用户传入的render函数 会在mount阶段被调用\r\n * @returns {Function} createApp\r\n */\r\nlet uid = 0;\r\nexport function createAppAPI(render) {\r\n  return function createApp(rootComponent, roopProps) {\r\n    const context = createAppContext();\r\n\r\n    const app = (context.app = {\r\n      // 高阶函数应用：在这里可以获取所有的参数 rendererOptions  rootComponent roopProps container\r\n      _uid: uid++,\r\n      _component: rootComponent,\r\n      _props: roopProps,\r\n      _container: null,\r\n      _context: context,\r\n\r\n      mount(container) {\r\n        // debugger;\r\n        // 基于rootComponent组件对象创建虚拟节点 createVNode\r\n        const vNode = createVNode(rootComponent, roopProps);\r\n        // 调用render方法 将返回的虚拟vNode转化成真实dom 挂载到container\r\n        render(vNode, container);\r\n\r\n        // 给app属性标记_container 便于后续\r\n        app._container = container;\r\n      },\r\n\r\n      unmount() {},\r\n\r\n      use(plugin, ...options) {},\r\n\r\n      mixin(componentOptions) {},\r\n\r\n      component(name, component) {},\r\n\r\n      directive(name, directive) {},\r\n\r\n      provide(key, value) {},\r\n    });\r\n\r\n    return app;\r\n  };\r\n}\r\n","import { hasOwn } from \"@gg-vue/shared\";\r\n\r\n/**\r\n * 这个porxy handlers主要就是拦截用户在render函数内部去proxy上取props、data、setupState的取值和存值行为\r\n *\r\n *  比如你的组件定义了一个state在setup中返回了 然后还定义了data和props等\r\n *  那么如何让用户在render函数内部直接用proxy.name可以去instance的props、setupState和data上取值\r\n *  就要通过代理来实现：proyx.name => instance.state.name\r\n */\r\nexport const PublicInstanceProxyHandlers = {\r\n  /**\r\n   *\r\n   * @param target   target = instance.ctx = { _: instance };\r\n   * @param key\r\n   *\r\n   * instance.ctx这个对象传递给render函数，会被参数proxy接受\r\n   * render函数内部用户会去proxy上取props、data、setupState也就是setup函数的返回值是一个对象的时候\r\n   * 比如：proxy.props.name\r\n   */\r\n  get({ _: instance }, key) {\r\n    // 如果属性名以$开头 那么直接返回undefined\r\n    if (key[0] === \"$\") {\r\n      return undefined;\r\n    }\r\n\r\n    const { props, setupState, data } = instance;\r\n\r\n    if (hasOwn(setupState, key)) {\r\n      return setupState[key];\r\n    } else if (hasOwn(props, key)) {\r\n      return props[key];\r\n    } else if (hasOwn(data, key)) {\r\n      return data[key];\r\n    } else {\r\n      return undefined;\r\n    }\r\n  },\r\n  set({ _: instance }, key, value) {\r\n    const { props, setupState, data } = instance;\r\n    if (hasOwn(setupState, key)) {\r\n      setupState[key] = value;\r\n    } else if (hasOwn(props, key)) {\r\n      props[key] = value;\r\n    } else if (hasOwn(data, key)) {\r\n      data[key] = value;\r\n    }\r\n    return true;\r\n  },\r\n};\r\n","import { ShapeFlags, isFunction, isObject } from \"@gg-vue/shared\";\r\nimport { PublicInstanceProxyHandlers } from \"./componentPublicInstance\";\r\n\r\n/**\r\n * @description 基于组件的虚拟dom创建一个组件实例instance\r\n * @param vnode 组件的vNode\r\n * @returns\r\n *\r\n * 补充：组件的props和attrs分别代表什么?\r\n *\r\n * 父组件中使用：\r\n * <header name=\"lilei\" age=\"18\" isShow=\"flase\"></header>\r\n *\r\n * 子组件header内部的只接受了name和age，那么：\r\n * 子组件的props = {name,age}\r\n * 子组件的attrs = {isShow} 所有没有被props接受的属性集合都时attrs\r\n *\r\n * @description instance 包含一系列组件状态的js对象 比如props\\setupState\\attrs\\slots等\r\n * @description context Vue内部将一些常用的属性和对象从instance中抽离出来 通过setup参数传递给用户使用\r\n * @description proxy 专门来代理访问instance的代理对象 让用户在render函数中更加方便取值\r\n */\r\nlet uid = 0;\r\nlet currentInstance = null;\r\n\r\nexport function createComponentInstance(vnode) {\r\n  const instance = {\r\n    uid: uid++,\r\n    vnode,\r\n    ctx: {},\r\n    type: vnode.type, // createvNode时传入的html tag字符串或者组件的js对象\r\n    props: {}, // 组件的属性\r\n    attrs: {}, // 组件的attrs\r\n    slots: {},\r\n    data: {},\r\n    setupState: {}, // 如果setup返回一个对象 这个对象会被当做setupState\r\n    setupContext: null, // setup函数执行时的上下文对象\r\n    render: null, // 调用setup返回的可能是一个render方法 会被填充到这里\r\n    isMounted: false, // 标识此组件是否挂载了，\r\n    proxy: null,\r\n    update: null,\r\n    subTree: null,\r\n  };\r\n\r\n  instance.ctx = { _: instance };\r\n\r\n  return instance;\r\n}\r\n\r\n/**\r\n * @description 解析组件实例instance 将需要的数据解析然后挂载到实例instance上\r\n * @param instance\r\n */\r\nexport function setupComponent(instance) {\r\n  const vnode = instance.vnode;\r\n  const { props, children, shapeFlag } = vnode;\r\n\r\n  // 基于虚拟节点vnode中得到的props, children 解析之后放到组件实例instance上\r\n  instance.props = props; // initProps\r\n  instance.children = children; // initSlots\r\n\r\n  // 判断是普通组件还是函数式组件\r\n  const isStateful = shapeFlag & ShapeFlags.STATEFUL_COMPONENT;\r\n  // 如果有状态调用当前组件实例的render/setup方法 用返回值来填充instance上的setupState属性和render方法\r\n  const setupResult = isStateful ? setupStatefulComponent(instance) : undefined;\r\n  // 将setup函数执行的结果返回\r\n  return setupResult;\r\n}\r\n\r\nexport function setupStatefulComponent(instance) {\r\n  // 1. 代理 不用instance.props.xxx instance.data.xxx 去访问\r\n  instance.proxy = new Proxy(instance.ctx, PublicInstanceProxyHandlers);\r\n\r\n  // 2. 拿到传入的组件对象 并获取到用户写的setup函数\r\n  const Component = instance.type;\r\n  let { setup } = Component;\r\n\r\n  if (setup) {\r\n    //   创建setup在执行时的参数props和context 只有当用户传入的setup函数的参数大于1时才需要\r\n    const setupContext = setup.length > 1 ? createSetupContext(instance) : null;\r\n    instance.setupContext = setupContext;\r\n\r\n    /**\r\n     * 将instance上很多属性中提取一些常用的属性和方法传递给setup的第二个参数context\r\n     * 通过参数暴露出来供用户直接调用\r\n     * 所以组件的实例instance和组件的context是不同的 后者基于前者得到 是一个子集\r\n     */\r\n    const setupResult = setup(instance.props, instance.setupContext);\r\n    handleSetupResult(instance, setupResult);\r\n  } else {\r\n    /**\r\n     * 如果传入的组件对象上有render函数 那么还需要执行render函数\r\n     * render函数的参数proxy是一个代理了组件的instance实例对象的代理对象\r\n     * 用户去proxy上取值 就会被拦截代理到去instance上的props data setupState上取值\r\n     */\r\n    finishComponentSetup(instance);\r\n  }\r\n}\r\n\r\n/**\r\n * @description 基于setup函数执行返回值(render函数|对象)进行处理\r\n * @param instance\r\n * @param setupResult\r\n */\r\nfunction handleSetupResult(instance, setupResult) {\r\n  // 返回值是函数 那么这个函数就被当做实例的render函数\r\n  if (isFunction(setupResult)) {\r\n    instance.render = setupResult;\r\n  } else if (isObject(setupResult)) {\r\n    // 返回值是对象 那么这个函数就被当做实例的setupState\r\n    instance.setupState = setupResult;\r\n  }\r\n\r\n  // 组件初始化完成\r\n  finishComponentSetup(instance);\r\n}\r\n\r\n/**\r\n * @description render函数优先级问题\r\n * 1. setup返回值是一个函数 那么优先使用\r\n * 2. 其次是用户自己传递的render函数\r\n * 3. 最后才是用户传入的模板template编译的结果\r\n * @param instance\r\n */\r\nfunction finishComponentSetup(instance) {\r\n  const Component = instance.type;\r\n  /**\r\n   * 1. render函数的来源是多元的 这一步首先确定render函数\r\n   * 实例上没有render函数 说明setup没有返回render函数\r\n   * 此时如果Component对象用户传递了render函数 那么自己用\r\n   * 此时如果Component对象用户没有传递render函数并且有模板 那么去进行模板编译生成一个render函数\r\n   */\r\n  if (!instance.render) {\r\n    if (Component.template && !Component.render) {\r\n      // 执行模板编译并将结果赋值给Component.render\r\n      // Component.render = compile(Component.template)\r\n    }\r\n\r\n    // 情况1:用户自己传递了Component.render函数 此时用用户自己的\r\n    // 情况2：用户没有传递模板 并且没有传递render函数 此时给一个空函数() => {}\r\n    instance.render = Component.render || (() => {});\r\n  }\r\n\r\n  /**\r\n   * 2. Vue2.0 选项式API的兼容applyOptions\r\n   */\r\n  // applyOptions(instance, Component)\r\n}\r\n\r\nexport function createSetupContext(instance) {\r\n  return {\r\n    props: instance.props,\r\n    attrs: instance.attrs,\r\n    slots: instance.slots,\r\n    emit: () => {},\r\n    expose: () => {},\r\n  };\r\n}\r\n","let quene = [];\r\n\r\n/**\r\n * @description 将job进行去重之后推入到一个队列上\r\n * 避免连续更新三次相同的age 不需要连续执行三次age对应的effect执行\r\n *  state.age = 20;\r\n *  state.age = 20;\r\n *  state.age = 20;\r\n *\r\n * @param job 其实就是组件的effect函数 执行effect函数内部会执行render函数 重新取值进行渲染\r\n */\r\nexport function queneJob(job) {\r\n  console.log(\"调度器执行\");\r\n  if (!quene.includes(job)) {\r\n    quene.push(job);\r\n    queueFlush();\r\n  }\r\n}\r\n\r\nlet isFlushPending = false;\r\n/**\r\n * @description 通过哨兵变量和浏览器的eventLoop机制来实现的队列刷新\r\n * 等待当前轮循环的所有执行栈的任务执行完毕 然后执行微任务Promise.resolve().then\r\n * 好处是同一轮事件循环中 无论quenejob执行了N次\r\n * 保证flushJobs只执行一次\r\n *\r\n * 避免了：\r\n * state.age = 100;\r\n * state.name = 'xx';\r\n * state.xx = 50\r\n *\r\n * 这种同一轮事件循环中连续执行三次effect去更新同一组件的问题\r\n */\r\nfunction queueFlush() {\r\n  if (!isFlushPending) {\r\n    isFlushPending = true;\r\n    Promise.resolve().then(flushJobs);\r\n  }\r\n}\r\n\r\n/**\r\n * @description 刷新队列 就是将队列中每一job取出来执行 但是在执行前需要排序\r\n * 1. 保证先刷新父组件的effect 后刷新子组件的effect\r\n *    因为effect的id总是父亲小于儿子\r\n *    避免子组件刷新完了 又修改了父组件 导致父组件重新刷新\r\n *\r\n * 2. 如果在父组件执行effect更新期间子组件已经被卸载了 那么可以跳过子组件的effect执行\r\n */\r\nfunction flushJobs() {\r\n  isFlushPending = false;\r\n  quene.sort((a, b) => a.id - b.id);\r\n  for (const job of quene) {\r\n    job();\r\n  }\r\n  quene.length = 0;\r\n}\r\n\r\n// queneJob(effect)\r\n// queneJob(effect)\r\n// queneJob(effect)\r\n// queneJob(effect)\r\n// queneJob(effect)\r\n\r\nexport function nextTick(fn): Promise<void> {\r\n  return Promise.resolve().then(fn);\r\n}\r\n","import { ShapeFlags, isObject } from \"@gg-vue/shared\";\r\nimport { effect } from \"@gg-vue/reactivity\";\r\nimport { createAppAPI } from \"./apiCreateApp\";\r\nimport { createComponentInstance, setupComponent } from \"./component\";\r\nimport { createVNode, normalizeVNode, Text } from \"./vnode\";\r\nimport { queneJob } from \"./scheduler\";\r\n\r\n/**\r\n * runtime-core提供和平台无关的创建不同的渲染器的方法\r\n * 创建渲染器的核心是提供一个render函数\r\n * 只需要告诉这个render函数把那些 VNode渲染到那个真实dom节点上即可\r\n * 1. weex\r\n * 2. web\r\n * 3. ssr\r\n * @description 传入不同的RendererOptions 返回不同的渲染器\r\n * @param rendererOptions 渲染选项 主要是包含一个当前平台的对节点以及属性操作的api接口组成对象\r\n * @returns renderer 返回一个渲染器 其实就是一个app对象 上面有一系列方法如mount\r\n */\r\n\r\nexport function createRenderer(rendererOptions) {\r\n  const {\r\n    insert: hostInsert,\r\n    remove: hostRemove,\r\n    patchProp: hostPatchProp,\r\n    createElement: hostCreateElement,\r\n    createText: hostCreateText,\r\n    setText: hostSetText,\r\n    setElementText: hostSetElementText,\r\n  } = rendererOptions;\r\n\r\n  /**\r\n   * @description runtime-core的核心 基于不同的虚拟节点创建不同的真实dom元素\r\n   *\r\n   * 1. 将虚拟dom转化为真实DOM\r\n   * 2. 将真实DOM挂载到container山\r\n   * 3. 虚拟DOM转化为真实DOM的过程中会有patch操作\r\n   * @param vNode 虚拟DOM\r\n   * @param container 真实DOM节点\r\n   */\r\n  const render = function (vNode, container) {\r\n    console.log({\r\n      vNode,\r\n      container,\r\n    });\r\n\r\n    patch(container._vnode || null, vNode, container);\r\n    container._vnode = vNode;\r\n  };\r\n\r\n  /**\r\n   * @description 更新和挂载的核心流程\r\n   * @param oldVNode\r\n   * @param newVNode\r\n   * @param container\r\n   */\r\n  const patch = function (oldVNode, newVNode, container) {\r\n    /**\r\n     * 针对传入的不同虚拟节点做初始化操作\r\n     * 基于二进制的按位与来判断传入的虚拟节点类型 要比写if-else好很多\r\n     * 因为拿未知的节点类型和目标节点类型按位与 如果返回有值 那么肯定相等\r\n     * 否则按位与会返回0\r\n     *\r\n     * 00000001\r\n     * 00000010\r\n     * 00000100\r\n     * 00001000\r\n     * 00010000\r\n     * 00100000\r\n     * 01000000\r\n     * 10000000\r\n     *\r\n     * 比如元素类型ELEMENT00000001只有在和自己进行按位与才会返回true 和上述其他类型按位与都会返回0\r\n     */\r\n    const { shapeFlag, type } = newVNode;\r\n\r\n    switch (type) {\r\n      case Text:\r\n        processText(oldVNode, newVNode, container);\r\n        break;\r\n\r\n      default:\r\n        if (shapeFlag & ShapeFlags.ELEMENT) {\r\n          console.log(\"这是一个HTML元素的虚拟DOM节点\", newVNode);\r\n          processElement(oldVNode, newVNode, container);\r\n        } else if (shapeFlag & ShapeFlags.STATEFUL_COMPONENT) {\r\n          console.log(\"这是一个普通有状态组件的虚拟DOM节点\");\r\n          processComponent(oldVNode, newVNode, container);\r\n        } else if (shapeFlag & ShapeFlags.FUNCTIONAL_COMPONENT) {\r\n          console.log(\"这是一个函数式组件的虚拟DOM节点\");\r\n          processComponent(oldVNode, newVNode, container);\r\n        }\r\n    }\r\n  };\r\n\r\n  const processText = function (oldVNode, newVNode, container) {\r\n    // 将文本插入到container中\r\n    if (oldVNode == null) {\r\n      // 先基于newVNode创建出来一个dom文本节点\r\n      newVNode.el = hostCreateText(newVNode.children);\r\n      // 再将dom文本节点插入到el节点中 dom操作必须操作dom元素\r\n      hostInsert(newVNode.el, container);\r\n    } else {\r\n    }\r\n  };\r\n\r\n  const processElement = function (oldVNode, newVNode, container) {\r\n    if (oldVNode == null) {\r\n      // 元素挂载\r\n      mountElement(newVNode, container);\r\n    } else {\r\n    }\r\n  };\r\n\r\n  const mountElement = function (vnode, container) {\r\n    const { type, props, shapeFlag, children } = vnode;\r\n    // 创建真实el和虚拟vnode产生连接\r\n    const el = hostCreateElement(type);\r\n    vnode.el = el;\r\n\r\n    // 给元素添加props和attrs以及style属性 以及绑定事件\r\n    if (props) {\r\n      for (const key in props) {\r\n        // el, key, prevValue, nextValue\r\n        hostPatchProp(el, key, null, props[key]);\r\n      }\r\n    }\r\n\r\n    // 给元素添加子节点 可能是一个文本节点或者一个数组里的多个节点\r\n    if (shapeFlag & ShapeFlags.TEXT_CHILDREN) {\r\n      hostSetElementText(el, children);\r\n    } else if (shapeFlag & ShapeFlags.ARRAY_CHILDREN) {\r\n      mountChildren(children, el);\r\n    }\r\n\r\n    // 将创建出来的el插入到container中 child, parent, anchor\r\n    hostInsert(el, container);\r\n  };\r\n\r\n  const mountChildren = function (children, container) {\r\n    for (let index = 0; index < children.length; index++) {\r\n      /**\r\n       * 创建出每一个儿子节点对应的虚拟vNode 交给patch挂载或者渲染\r\n       * 为什么要这样做？\r\n       * 因为如果直接操作真实dom 会出现连续插入两次text文本的操作 后面的会覆盖前面的\r\n       */\r\n      const child = normalizeVNode(children[index]);\r\n      // console.log({ child });\r\n\r\n      //  递归渲染\r\n      patch(null, child, container);\r\n    }\r\n  };\r\n\r\n  const patchElement = function () {};\r\n\r\n  const processComponent = function (oldVNode, newVNode, container) {\r\n    // 第一次挂载\r\n    if (oldVNode == null) {\r\n      mountComponent(newVNode, container);\r\n    } else {\r\n      // 更新 需要dom diff\r\n      updateComponent(oldVNode, newVNode, container);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * 组件的渲染流程\r\n   * 1. 调用setup拿到返回值\r\n   * 2. 获取render函数返回的结果\r\n   * 3. 进行渲染\r\n   * @param initialVNode\r\n   * @param container\r\n   */\r\n  const mountComponent = function (initialVNode, container) {\r\n    // 1.基于虚拟节点创建组件实例\r\n    const instance = createComponentInstance(initialVNode);\r\n    // 通过虚拟vnode.component可以获取到解析后的组件实例 反之通过组件实例instance的vnode属性也可以获取虚拟节点\r\n    initialVNode.component = instance;\r\n\r\n    // 2. 将需要的数据解析然后挂载到实例上\r\n    setupComponent(instance);\r\n\r\n    // 3. 创建一个effect 让render函数执行\r\n    setupRenderEffect(instance, initialVNode, container);\r\n  };\r\n\r\n  /**\r\n   * @description 创建一个effect函数 在effect内部调用render函数\r\n   * 这样render函数中使用的数据就会收集这个effect\r\n   * 当数据发生变化的时候 就会重新执行effect 也就是重新调用render函数重新渲染\r\n   * @param instance\r\n   * @param initialVNode\r\n   * @param container\r\n   */\r\n  const setupRenderEffect = function (instance, initialVNode, container) {\r\n    // 每个组件都有一个effect vue3是组件级更新 数据更新会重新执行对应组件的effect\r\n    instance.update = effect(\r\n      function componentEffect() {\r\n        // 首次渲染组件\r\n        if (!instance.isMounted) {\r\n          // proxyToUse就是{ _: instance }这个target对象的代理对象\r\n          let proxyToUse = instance.proxy;\r\n\r\n          /**\r\n           * 执行render函数\r\n           * 第一个proxyToUse代表指定render函数内部的this\r\n           * 第二个proxyToUse代表render函数执行时可接收到的参数对象 取值和设值都会代理\r\n           *\r\n           *  第一步：将用户传入的rootComponent变成vNode 描述组件本身\r\n           *  此时vNode的type就是用户传入的对象{render，setup}\r\n           *  vNode = createVNode(rootComponent, roopProps)\r\n           *\r\n           *\r\n           *  第二步：将vNode和container传入render函数进行渲染\r\n           *  此时subTree的type就是一个具体的节点h1 div等 表示这个组件的根节点渲染出来就是div\r\n           *  subTree = render(vNode, container);\r\n           *  render函数的返回值subTree是执行组件render函数的虚拟节点树对象\r\n           *\r\n           *  这是一个父子关系\r\n           *  执行insatnce的render函数就会实现依赖收集\r\n           */\r\n          const subTree = instance.render.call(proxyToUse, proxyToUse);\r\n\r\n          patch(null, subTree, container);\r\n\r\n          instance.subTree = subTree;\r\n          instance.isMounted = true;\r\n        } else {\r\n          // 更新组件逻辑\r\n          console.log(\"更新组件\");\r\n        }\r\n      },\r\n      {\r\n        // 调度器会优先执行 不会再去执行effect也就是这里的componentEffect函数\r\n        // 调度器函数执行的时候会将componentEffect本身当做参数传递过去\r\n        scheduler: queneJob,\r\n      }\r\n    );\r\n  };\r\n\r\n  const updateComponent = function (oldVNode, newVNode, container) {};\r\n\r\n  const createApp = createAppAPI(render);\r\n\r\n  /**\r\n   * Vue的自定义渲染器创建函数\r\n   * 接受一个渲染对象rendererOptions\r\n   * 返回一个包含createApp函数和render函数的对象renderer\r\n   *\r\n   * 用户可以从renderer上拿到createApp函数并传入一个组件对象rootComponent和roopProps\r\n   * 返回一个根组件实例app\r\n   * 接着用户可以调用这个根组件实例app上的:\r\n   * + use方法去注册插件 如ElementPlus\r\n   * + component方法去注册组件\r\n   * + provide去顶级注入\r\n   * + directive去注册指令\r\n   * + mixins来实现全局混入\r\n   * + mount方法实现挂载 一般这是最后一步 在调用mount的时候会再内部调用传入的render函数 render函数内部会有挂载和patch操作\r\n   * + unmount来卸载\r\n   */\r\n  return {\r\n    createApp: createApp,\r\n    render: render,\r\n  };\r\n}\r\n","import { isArray, isObject } from \"@gg-vue/shared\";\r\nimport { createVNode, isVNode } from \"./vnode\";\r\n\r\n/**\r\n * @description h函数多出现在render函数中 是createVnode的简写 但是它比createVnode更加灵活\r\n * @description 正是因为这种参数灵活 我们才需要进行一次统一的格式化然后交给createVnode执行\r\n * @param type\r\n * @param propsOrChildren\r\n * @param children\r\n * @returns\r\n */\r\nexport function h(type, propsOrChildren, children) {\r\n  console.log({\r\n    type,\r\n    propsOrChildren,\r\n    children,\r\n  });\r\n\r\n  const l = arguments.length;\r\n\r\n  /**\r\n   * 1. h函数的第一位参数是必传的\r\n   * 2. h函数可以省略第二个参数，并且可以进行嵌套\r\n   *\r\n   * l = 2那么说明另外一位参数要不是props 要不是children\r\n   *\r\n   * 1. 当参数是对象并且不是数组，此时有两种情况\r\n   *    + 对象是props\r\n   *     h('div',{name:'lilei'})\r\n   *    + 对象是嵌套的h函数返回值也就是虚拟vnode\r\n   *     h('div',h('p'))\r\n   *        此时应该将 嵌套的h函数返回值的虚拟节点对象当前children传入\r\n   *        注意h函数的返回值只能当做children 并且包装在数组里面\r\n   *\r\n   * 2. 否则那么就是下面两种情况：\r\n   *    + 传递的是一个字符串   h('div',’666‘)\r\n   *    + 传递的是一个数组  h(div,[hello,h(span)])\r\n   *    以上两种情况都可以直接当做第三个参数传递过去即可\r\n   */\r\n\r\n  if (l === 2) {\r\n    if (isObject(propsOrChildren) && !isArray(propsOrChildren)) {\r\n      if (isVNode(propsOrChildren)) {\r\n        return createVNode(type, null, [propsOrChildren]);\r\n      } else {\r\n        return createVNode(type, propsOrChildren);\r\n      }\r\n    } else {\r\n      return createVNode(type, null, propsOrChildren);\r\n    }\r\n  } else {\r\n    /**\r\n     * 长度大于3：说明从第三个开始全部都是children 必须以数组包裹\r\n     * 长度等于3：\r\n     *  + 最后一个参数是虚拟节点 也就是h函数返回值 此时包装为数组当做children\r\n     *  + 最后一个参数是字符串\r\n     */\r\n    if (l > 3) {\r\n      children = Array.from(arguments).slice(2);\r\n    } else if (l === 3 && isVNode(children)) {\r\n      children = [children];\r\n    }\r\n\r\n    return createVNode(type, propsOrChildren, children);\r\n  }\r\n}\r\n","/**\r\n * runtime-dom的核心是向外部暴露DOM Api\r\n * 1. 操作节点的api 专注于增删改查\r\n * 2. 操作属性的api 专注于添加 删除 更新\r\n *  + 样式\r\n *  + 类名\r\n *  + 事件\r\n *  + 其他属性\r\n *\r\n * runtime-dom重点是为了解决浏览器平台的差异 并不直接面向用户 供runtime-core调用\r\n * runtime-core是直接面向用户的 用户会直接调用这里的方法\r\n */\r\nimport { nodeOps } from \"./nodeOps\";\r\nimport { patchProp } from \"./patchProps\";\r\nimport { createRenderer } from \"@gg-vue/runtime-core\";\r\n\r\n// 将操作dom节点和更新属性、事件、style、class等方法进行合并\r\nconst rendererOptions = Object.assign({}, nodeOps, { patchProp });\r\n\r\nexport const createApp = function (rootComponent, roopProps = null) {\r\n  // 1. 创建渲染器 createRenderer是runtime-core的核心\r\n  const renderer = createRenderer(rendererOptions);\r\n\r\n  // 2. 基于渲染器创建App实例\r\n  const app: any = renderer.createApp(rootComponent, roopProps);\r\n\r\n  // 获取渲染器给的mount方法\r\n  let { mount } = app;\r\n\r\n  /**\r\n   * 这里对mount进行重写 为什么？\r\n   * 1. 这里需要再挂载之前清空dom 这是dom操作 而渲染器内部提供的方法是可以在多平台使用的\r\n   * 不应该包含任何dom操作\r\n   * 2. 切片函数\r\n   *\r\n   */\r\n  app.mount = function (container) {\r\n    // 渲染之前清空容器 这里为用户提供了自定义的空间 比如是canvas的画布 这里就可以执行canvas的清空画布的api\r\n    container = document.querySelector(container);\r\n    container.innerHTML = \"\";\r\n\r\n    // 外部执行的挂载的时候用的还是渲染器给的方法 但是这里有个切片的技巧\r\n    // 就是在执行渲染器的mount之前 可以插入当前平台自己的逻辑\r\n    // web平台可能是document.querySelector 在别的平台很可能就不是了\r\n    mount(container);\r\n  };\r\n\r\n  // 3. 将创建好的app实例返回 上面有mount方法\r\n  return app;\r\n};\r\n\r\nexport * from \"@gg-vue/runtime-core\";\r\nexport * from \"@gg-vue/reactivity\";\r\n"],"names":["uid"],"mappings":"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"}